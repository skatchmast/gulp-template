_classCallCheck = (instance, Constructor) ->
	if !(instance instanceof Constructor)
		throw new TypeError('Cannot call a class as a function')
	return

'use strict'
_createClass = do ->
	
	defineProperties = (target, props) ->
		i = 0
		while i < props.length
			descriptor = props[i]
			descriptor.enumerable = descriptor.enumerable or false
			descriptor.configurable = true
			if 'value' of descriptor
				descriptor.writable = true
			Object.defineProperty target, descriptor.key, descriptor
			i++
		return
	
	(Constructor, protoProps, staticProps) ->
		if protoProps
			defineProperties Constructor.prototype, protoProps
		if staticProps
			defineProperties Constructor, staticProps
		Constructor
_typeof = if typeof Symbol == 'function' and typeof Symbol.iterator == 'symbol' then ((obj) ->
	typeof obj
) else ((obj) ->
	if obj and typeof Symbol == 'function' and obj.constructor == Symbol and obj != Symbol.prototype then 'symbol' else typeof obj
)
((root, factory) ->
	if typeof define == 'function' and define.amd
#AMD
		define [ 'jquery' ], factory
	else if (if typeof exports == 'undefined' then 'undefined' else _typeof(exports)) == 'object'
		$ = requie('jquery')
		module.exports = factory($)
	else
		root.navScrollSpy = factory(root.jQuery)
	return
) window, ($) ->
	pluginName = 'jqNavScrollSpy'
	defaults =
		navItems: '.nav-item'
		scrollContainer: 'html,body'
		spyItems: '.spy-item'
		easing: 'swing'
		speed: 550
	jqNavScrollSpy = do ->
		`var jqNavScrollSpy`
		
		jqNavScrollSpy = (element, configs) ->
			_classCallCheck this, jqNavScrollSpy
			@_element = element
			@$win = $(window)
			@defaults = $.extend({}, defaults, configs)
			@init()
			return
		
		_createClass jqNavScrollSpy, [
			{
				key: 'init'
				value: ->
					@$navItems = $(@defaults.navItems)
					@$spyItems = $(@defaults.spyItems)
					@$scrollContainer = $(@defaults.scrollContainer)
					@fixTop = $(@$spyItems[0]).offset().top
					#drop
					@spyItemsData = @getSpyItemsData()
					@spyScroll()
					@clickSwitch()
					return
				
			}
			{
				key: 'spyScroll'
				value: ->
					@$win.on 'scroll', @throttle(@scrollCallBack, 100, 200)
					return
				
			}
			{
				key: 'scrollCallBack'
				value: ->
					spyIndex = @getVisibleElIndex()
					@changeNav @$navItems[spyIndex]
					return
				
			}
			{
				key: 'getSpyItemsData'
				value: ->
					_this2 = this
					spyItemsData = []
					@$spyItems.each (index) ->
						spyItemsData[index] = (_this2.getOffsetTop(index) + _this2.getOffsetTop(index) + $(_this2.$spyItems[index]).height()) / 2
						return
					spyItemsData
				
			}
			{
				key: 'getVisibleElIndex'
				value: ->
					_this3 = this
					spyIndex = undefined
					scrollTop = parseInt(@$win.scrollTop())
					$.each @spyItemsData, (index) ->
						if _this3.spyItemsData[0] >= scrollTop
							spyIndex = 0
							return true
						else if _this3.spyItemsData[index] <= scrollTop and scrollTop <= _this3.spyItemsData[index + 1]
							spyIndex = index + 1
							return true
						return
					spyIndex
				
			}
			{
				key: 'throttle'
				value: (func, wait, mustRun) ->
					timeout = undefined
					context = this
					startTime = new Date
					->
						args = arguments
						curTime = new Date
						clearTimeout timeout
						# 如果达到了规定的触发时间间隔，触发 handler
						if curTime - startTime >= mustRun
							func.apply context, args
							startTime = curTime
						else
							timeout = setTimeout(func.bind(context), wait)
						return
				
			}
			{
				key: 'clickSwitch'
				value: ->
					_this = this
					@$navItems.on 'click', ->
						_this.changeNav this
						navIndex = $(this).index()
						_this.$win.off 'scroll'
						_this.scrollIntoView navIndex
						return
					return
				
			}
			{
				key: 'changeNav'
				value: (currentNav) ->
					@$navItems.removeClass 'active'
					$(currentNav).addClass 'active'
					return
				
			}
			{
				key: 'scrollIntoView'
				value: (navIndex) ->
					_this4 = this
					offsetTop = parseInt(@getOffsetTop(navIndex))
#					if !@$scrollContainer.is(':animated')
					@$scrollContainer.stop().animate { 'scrollTop': offsetTop }, @defaults.speed, @defaults.easing, ->
						_this4.spyScroll()
						return
					return
				
			}
			{
				key: 'getOffsetTop'
				value: (index) ->
					parseInt($(@$spyItems[index]).offset().top) - parseInt(@fixTop)
				
			}
		]
		jqNavScrollSpy
	
	$.fn.jqNavScrollSpy = (configs) ->
		@each ->
			if !$.data(this, 'plugin_' + pluginName)
				$.data this, 'plugin_' + pluginName, new jqNavScrollSpy(this, configs)
			else
				$.data this, 'plugin_' + pluginName, null
				$.data this, 'plugin_' + pluginName, new jqNavScrollSpy(this, configs)
			return
	
	return

# ---
# generated by js2coffee 2.2.0